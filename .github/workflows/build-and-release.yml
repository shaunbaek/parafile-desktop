name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: darwin
            arch: universal
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm libarchive-tools

      - name: Generate icons
        run: npm run generate-icons

      # macOS Code Signing
      - name: Import macOS certificates
        if: matrix.os == 'macos-latest' && env.APPLE_CERT_BASE64
        env:
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo $APPLE_CERT_BASE64 | base64 --decode > $CERTIFICATE_PATH
          
          security create-keychain -p "$APPLE_CERT_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_CERT_PASSWORD" $KEYCHAIN_PATH
          
          security import $CERTIFICATE_PATH -P "$APPLE_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      # Windows Code Signing
      - name: Import Windows certificate
        if: matrix.os == 'windows-latest' && env.WINDOWS_CERT_BASE64
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
        run: |
          $cert = [System.Convert]::FromBase64String($env:WINDOWS_CERT_BASE64)
          $certPath = "$env:RUNNER_TEMP\certificate.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $cert)
          echo "WINDOWS_CERT_FILE=$certPath" >> $env:GITHUB_ENV

      - name: Build with Electron Forge
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run make

      - name: List build artifacts
        run: |
          echo "Contents of out/make:"
          ls -la out/make/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-distributables
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.zip
            out/make/**/*.dmg
            out/make/**/*.exe
            out/make/**/*.AppImage
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
          release_name: ParaFile Desktop ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
          body: |
            ## ParaFile Desktop Release
            
            AI-powered document organization and renaming application.
            
            ### Download Instructions
            
            #### macOS
            - Download the `.dmg` file
            - Open the DMG and drag ParaFile Desktop to Applications
            - On first launch, right-click and select "Open" to bypass Gatekeeper
            
            #### Windows
            - Download the `.exe` installer
            - Run the installer and follow the prompts
            - The app will be available in your Start Menu
            
            #### Linux
            - **Debian/Ubuntu**: Download and install the `.deb` file
            - **Fedora/RHEL**: Download and install the `.rpm` file
            - **Other**: Download the `.zip` file and extract
            
            ### What's New
            - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
          draft: true
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const releaseId = ${{ steps.create_release.outputs.id }};
            
            async function uploadAssets(dir) {
              const entries = await fs.readdir(dir, { withFileTypes: true });
              
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                
                if (entry.isDirectory()) {
                  await uploadAssets(fullPath);
                } else if (entry.isFile()) {
                  const ext = path.extname(entry.name).toLowerCase();
                  const validExts = ['.dmg', '.exe', '.deb', '.rpm', '.zip', '.appimage'];
                  
                  if (validExts.includes(ext)) {
                    console.log(`Uploading ${entry.name}...`);
                    
                    const data = await fs.readFile(fullPath);
                    
                    await github.rest.repos.uploadReleaseAsset({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      release_id: releaseId,
                      name: entry.name,
                      data: data
                    });
                  }
                }
              }
            }
            
            await uploadAssets('artifacts');

  update-latest-json:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create latest.json for auto-updater
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          cat > latest.json << EOF
          {
            "version": "$VERSION",
            "releaseDate": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "path": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/",
            "files": {
              "mac": {
                "url": "ParaFile-Desktop-$VERSION.dmg",
                "sha512": ""
              },
              "windows": {
                "url": "ParaFile-Desktop-Setup-$VERSION.exe",
                "sha512": ""
              },
              "linux": {
                "url": "parafile-desktop_$VERSION_amd64.deb",
                "sha512": ""
              }
            }
          }
          EOF

      - name: Upload latest.json to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./latest.json
          asset_name: latest.json
          asset_content_type: application/json